//// Generated by `gleam run -m xmlconf/oasis/gen`.  Please edit with care!
////
////

import gleeunit/should
import simplifile
import xmlm

pub fn o_p01pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p06pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p06pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p07pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p07pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p08pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p08pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p09pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p28pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p28pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p28pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p28pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p28pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p28pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p28pass5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p28pass5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p29pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p29pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p30pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p30pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p30pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p30pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p31pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p31pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p31pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p31pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p43pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p43pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p45pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p45pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p47pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p47pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p48pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p48pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p49pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p49pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p50pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p50pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p52pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p52pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p54pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p54pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p55pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p55pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p57pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p57pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p59pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p59pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p61pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p61pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p62pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p62pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p63pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p63pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p64pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p64pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p68pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p68pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p69pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p69pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p70pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p70pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p71pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p71pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p72pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p72pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p76pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p76pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p01pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p01pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p03pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p04pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p04pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p06fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p06fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p08fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p08fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p08fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p08fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p10pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p10pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p14pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p14pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p15pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p15pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p16pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p16pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p16pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p18pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p18pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p22pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p23pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p23pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p23pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p23pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p24pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p24pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p24pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p24pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p25pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p25pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p25pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p25pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p26pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p26pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p27pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p27pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p27pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p27pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p27pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p27pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p27pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p27pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p32pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p32pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p39pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p39pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p40pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p40pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p40pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p40pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p41pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p41pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p41pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p41pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p42pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p42pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p42pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p42pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p44pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p44pass2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44pass2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p44pass3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44pass3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p44pass4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44pass4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p44pass5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44pass5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p66pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p74pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p74pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_e2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/e2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p01fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p01fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p01fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p01fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p01fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail10__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail10.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail11__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail11.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail12__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail12.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail13__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail13.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail14__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail14.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail15__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail15.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail16__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail16.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail17__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail17.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail18__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail18.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail19__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail19.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail20__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail20.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail21__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail21.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail22__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail22.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail23__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail23.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail24__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail24.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail25__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail25.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail26__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail26.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail27__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail27.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail28__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail28.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail29__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail29.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail30__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail30.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail31__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail31.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail7__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail7.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail8__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail8.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p02fail9__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p02fail9.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail10__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail10.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail11__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail11.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail12__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail12.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail13__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail13.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail14__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail14.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail15__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail15.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail16__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail16.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail17__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail17.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail18__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail18.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail19__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail19.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail20__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail20.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail21__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail21.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail22__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail22.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail23__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail23.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail24__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail24.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail25__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail25.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail26__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail26.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail27__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail27.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail28__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail28.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail29__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail29.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail7__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail7.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail8__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail8.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p03fail9__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p03fail9.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p04fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p04fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p04fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p04fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p04fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p04fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p05fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p05fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p09fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p09fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p09fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p09fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p09fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p09fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p10fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p10fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p10fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p10fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p10fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p10fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p11fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p11fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p11fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p11fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p12fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p12fail7__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p12fail7.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p14fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p14fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p14fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p14fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p14fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p14fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p15fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p15fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p15fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p15fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p15fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p15fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p16fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p16fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p16fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p16fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p18fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p18fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p18fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p18fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p18fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p18fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p22fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p22fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p22fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p23fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p23fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p23fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p23fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p23fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p23fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p24fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p24fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p24fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p25fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p25fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p26fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p26fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p26fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p26fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p27fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p27fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p28fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p28fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p29fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p29fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p30fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p30fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p31fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p31fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p32fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p32fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p32fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p32fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p32fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p32fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p39fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p39fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p39fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p39fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p39fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p39fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p40fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p40fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p40fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p40fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p40fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p41fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p41fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p41fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p41fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p41fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p41fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p42fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p42fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p42fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p42fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p42fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p42fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p43fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p43fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p43fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p43fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p43fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p43fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p44fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p44fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p44fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p44fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p44fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p44fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p45fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p45fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p45fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p45fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p45fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p45fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p45fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p45fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p46fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p46fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p47fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p47fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p47fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p47fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p47fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p47fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p47fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p47fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p48fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p48fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p48fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p48fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p49fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p49fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p50fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p50fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p51fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p51fail7__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p51fail7.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p52fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p52fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p52fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p52fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p53fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p53fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p54fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p54fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p55fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p55fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p56fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p56fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p57fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p57fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail7__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail7.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p58fail8__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p58fail8.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p59fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p59fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p59fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p59fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p59fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p59fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p60fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p60fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p61fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p61fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p62fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p62fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p62fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p62fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p63fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p63fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p63fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p63fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p64fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p64fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p64fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p64fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p66fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p66fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p66fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p66fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p66fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p66fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p66fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p68fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p68fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p68fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p68fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p68fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p68fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_error
}

pub fn o_p69fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p69fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p69fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p69fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p69fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p69fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p70fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p70fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p71fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p71fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p71fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p71fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p71fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p71fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p71fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p71fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p72fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p72fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p72fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p72fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p72fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p72fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p72fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p72fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p73fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p73fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p74fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p74fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p74fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p74fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p74fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p74fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail5__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail5.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p75fail6__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p75fail6.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p76fail1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p76fail1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p76fail2__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p76fail2.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p76fail3__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p76fail3.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p76fail4__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p76fail4.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}

pub fn o_p11pass1__test() {
  let assert Ok(data) =
    simplifile.read_bits("test/test_files/xmlconf/oasis/p11pass1.xml")
  data |> xmlm.from_bit_array |> xmlm.signals |> should.be_ok
}
